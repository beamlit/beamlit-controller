{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Beamlit Controller","text":"<p>Beamlit Controller is a Kubernetes controller for Beamlit, the global infrastructure for AI agents. With this controller, you can deploy and manage workloads (such as agents, models and functions) on Beamlit-managed or private clusters directly using Kubernetes.</p> <p>A Beamlit gateway is also available to route inference requests to remote backends for improved resiliency and availability. Future-proof your existing AI deployments by offloading some or all traffic in case of usage surge or hardware failure.</p>"},{"location":"index.html#table-of-contents","title":"Table of Contents","text":"<ul> <li>Install</li> <li>Get Started</li> <li>Support</li> <li>Contributing</li> </ul>"},{"location":"index.html#install","title":"Install","text":"<p>For now, the controller requires you to have a Beamlit account. You can apply for private beta access here. After that, you will need to create a workspace and a service account in the workspace. Make sure to retrieve the service account's <code>client ID</code> and <code>client secret</code> as you will need it to install the controller.</p>"},{"location":"index.html#prerequisites","title":"Prerequisites","text":"<ul> <li>A Kubernetes cluster (version 1.27 or later is recommended).</li> <li>Helm (version 3.8.0 or later is recommended).</li> <li>The <code>client ID</code> and <code>client secret</code> for a Beamlit service account, as explained above.</li> </ul>"},{"location":"index.html#full-installation","title":"Full installation","text":"<p>Use this command for a complete installation of both the Beamlit controller and Beamlit gateway on your cluster, including all necessary dependencies for quick model offloading. Make sure to fill in the CLIENT_ID and CLIENT_SECRET values.</p> <pre><code>export CLIENT_ID=\"...\"\nexport CLIENT_SECRET=\"...\"\nexport API_KEY=`echo -n $CLIENT_ID:$CLIENT_SECRET | base64`\nhelm install beamlit-controller oci://ghcr.io/beamlit/beamlit-controller-chart \\\n    --set installMetricServer=true \\\n    --set beamlitApiToken=$API_KEY \\\n    --set config.defaultRemoteBackend.authConfig.oauthConfig.clientId=$CLIENT_ID \\\n    --set config.defaultRemoteBackend.authConfig.oauthConfig.clientSecret=$CLIENT_SECRET\n</code></pre>"},{"location":"index.html#get-started","title":"Get Started","text":"<p>With the Beamlit controller, you can deploy replicas of your AI applications on remote clusters \u2014whether private or Beamlit-managed\u2014 facilitating hybrid deployments across multiple regions.</p>"},{"location":"index.html#deploy-a-model","title":"Deploy a model","text":"<p>Let's assume this is an AI model deployment in your Kubernetes cluster. For testing purposes, this is a simple PHP-Apache deployment.</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: php-apache\nspec:\n  selector:\n    matchLabels:\n      run: php-apache\n  template:\n    metadata:\n      labels:\n        run: php-apache\n    spec:\n      containers:\n      - name: php-apache\n        image: registry.k8s.io/hpa-example\n        ports:\n        - containerPort: 80\n        resources:\n          limits:\n            cpu: 500m\n          requests:\n            cpu: 200m\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: php-apache\n  labels:\n    run: php-apache\nspec:\n  ports:\n  - port: 80\n  selector:\n    run: php-apache\nEOF\n</code></pre> <p>You want to offload this deployment to Beamlit, to make sure that user traffic is served even in case of burst or failure. To do so, you need to create a model deployment resource.</p>"},{"location":"index.html#create-a-beamlit-model-deployment","title":"Create a Beamlit model deployment","text":"<p>To create a model deployment, you need to create a ModelDeployment resource. Below is an example of a ModelDeployment resource for your PHP-Apache deployment. Here, offloading is scheduled to trigger when the average CPU usage of your deployment reaches 90%, in which case 50% of the requests will be routed to the remote cluster:</p> <pre><code>kubectl apply -f - &lt;&lt;EOF\napiVersion: deployment.beamlit.com/v1alpha1\nkind: ModelDeployment\nmetadata:\n  name: php-apache\nspec:\n  model: \"php-apache\"\n  environment: \"production\"\n  modelSourceRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: php-apache\n    namespace: default\n  serviceRef:\n    name: php-apache\n    namespace: default\n    targetPort: 80\n  offloadingConfig:\n    behavior:\n      percentage: 50\n    metrics:\n      - type: Resource\n        resource:\n          name: cpu\n          target:\n            type: Utilization\n            averageUtilization: 90\nEOF\n</code></pre> <p>You can check the status of the model deployment by running:</p> <pre><code>kubectl get modeldeployment php-apache\n</code></pre> <p>The model is now deployed on Beamlit and the controller is in watching state for the offloading condition to be met. When it is met, the model will become active and some requests will start being routed to Beamlit, making sure all your consumers are served. If your own deployment is completely down, all traffic will be routed to Beamlit.</p>"},{"location":"index.html#offload-on-total-failure","title":"Offload on total failure","text":"<p>In a terminal, simulate some load on your deployment:</p> <pre><code>kubectl run curl-check --rm -it --image=curlimages/curl -- sh -c \"while true; do response=\\$(curl -D - http://php-apache); echo \\\"\\$response\\\"; echo \\$response | grep -q 'Cf-Ray' &amp;&amp; echo 'Route: beamlit' || echo 'Route: local'; sleep 0.1; done\"\n</code></pre> <p>In another terminal, scale down your deployment to simulate a total failure: <pre><code>kubectl scale deployment php-apache --replicas=0\n</code></pre> You should see the output of the first terminal changing to <code>Route: beamlit</code> after scaling down the deployment. You've experienced no downtime and no error in the first terminal.</p>"},{"location":"index.html#support","title":"Support","text":"<p>If you need assistance with installing or using either the Beamlit controller or Beamlit gateway, please open an issue for support.</p>"},{"location":"index.html#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please use the Github flow to contribute to beamlit-controller. Create a branch, add commits, and open a pull request.</p>"},{"location":"admin-guide/deploy-helm.html","title":"Helm Deployment","text":"<p>You can deploy the Beamlit Controller using Helm. Below is an example of how to deploy the Beamlit Controller using Helm:</p> <pre><code>export CLIENT_ID=REPLACE_ME\nexport CLIENT_SECRET=REPLACE_ME\nhelm install beamlit-controller oci://ghcr.io/beamlit/beamlit-controller-chart \\\n    --set installMetricServer=true \\ # If you want to install the metric server along with the controller to allow offloading models\n    --set beamlitApiToken=`echo -n $CLIENT_ID:$CLIENT_SECRET | base64` \\\n    --set config.defaultRemoteBackend.authConfig.oauthConfig.clientId=$CLIENT_ID \\\n    --set config.defaultRemoteBackend.authConfig.oauthConfig.clientSecret=$CLIENT_SECRET\n</code></pre>"},{"location":"admin-guide/deploy-helm.html#values","title":"Values","text":"Key Type Default Description allowedNamespaces list <code>[\"default\"]</code> allowed namespaces beamlitApiToken string <code>\"REPLACE_ME\"</code> beamlit api token beamlitBaseUrl string <code>\"https://api.beamlit.com/v0\"</code> beamlit base url config object <code>{\"defaultRemoteBackend\":{\"authConfig\":{\"oauthConfig\":{\"clientId\":\"REPLACE_ME\",\"clientSecret\":\"REPLACE_ME\",\"tokenUrl\":\"https://api.beamlit.com/v0/oauth/token\"},\"type\":\"oauth\"},\"host\":\"run.beamlit.com\",\"pathPrefix\":\"/$workspace/models/$model\",\"scheme\":\"https\"},\"enableHTTP2\":false,\"namespaces\":\"default\",\"proxyService\":{\"adminPort\":8081,\"name\":\"beamlit-gateway\",\"namespace\":\"default\",\"port\":8080},\"secureMetrics\":false}</code> config.yaml options config.defaultRemoteBackend object <code>{\"authConfig\":{\"oauthConfig\":{\"clientId\":\"REPLACE_ME\",\"clientSecret\":\"REPLACE_ME\",\"tokenUrl\":\"https://api.beamlit.com/v0/oauth/token\"},\"type\":\"oauth\"},\"host\":\"run.beamlit.com\",\"pathPrefix\":\"/$workspace/models/$model\",\"scheme\":\"https\"}</code> default-remote-backend config.defaultRemoteBackend.authConfig object <code>{\"oauthConfig\":{\"clientId\":\"REPLACE_ME\",\"clientSecret\":\"REPLACE_ME\",\"tokenUrl\":\"https://api.beamlit.com/v0/oauth/token\"},\"type\":\"oauth\"}</code> auth-config config.defaultRemoteBackend.authConfig.oauthConfig object <code>{\"clientId\":\"REPLACE_ME\",\"clientSecret\":\"REPLACE_ME\",\"tokenUrl\":\"https://api.beamlit.com/v0/oauth/token\"}</code> oauth2 config.defaultRemoteBackend.authConfig.oauthConfig.clientId string <code>\"REPLACE_ME\"</code> client-id config.defaultRemoteBackend.authConfig.oauthConfig.clientSecret string <code>\"REPLACE_ME\"</code> client-secret config.defaultRemoteBackend.authConfig.oauthConfig.tokenUrl string <code>\"https://api.beamlit.com/v0/oauth/token\"</code> token-url config.defaultRemoteBackend.authConfig.type string <code>\"oauth\"</code> type config.defaultRemoteBackend.host string <code>\"run.beamlit.com\"</code> host config.defaultRemoteBackend.pathPrefix string <code>\"/$workspace/models/$model\"</code> path-prefix config.defaultRemoteBackend.scheme string <code>\"https\"</code> scheme config.enableHTTP2 bool <code>false</code> enable-http2 config.namespaces string <code>\"default\"</code> namespaces config.proxyService object <code>{\"adminPort\":8081,\"name\":\"beamlit-gateway\",\"namespace\":\"default\",\"port\":8080}</code> proxy-service config.proxyService.adminPort int <code>8081</code> proxy-service.admin-port config.proxyService.name string <code>\"beamlit-gateway\"</code> proxy-service.name config.proxyService.namespace string <code>\"default\"</code> proxy-service.namespace config.proxyService.port int <code>8080</code> proxy-service.port config.secureMetrics bool <code>false</code> secure-metrics controllerManager.kubeRbacProxy object <code>{\"args\":[\"--secure-listen-address=0.0.0.0:8443\",\"--upstream=http://127.0.0.1:8080/\",\"--logtostderr=true\",\"--v=0\"],\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]}},\"image\":{\"repository\":\"gcr.io/kubebuilder/kube-rbac-proxy\",\"tag\":\"v0.16.0\"},\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"128Mi\"},\"requests\":{\"cpu\":\"5m\",\"memory\":\"64Mi\"}}}</code> kube-rbac-proxy options controllerManager.kubeRbacProxy.args list <code>[\"--secure-listen-address=0.0.0.0:8443\",\"--upstream=http://127.0.0.1:8080/\",\"--logtostderr=true\",\"--v=0\"]</code> args to pass to the kube-rbac-proxy controllerManager.kubeRbacProxy.containerSecurityContext object <code>{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]}}</code> container security context controllerManager.kubeRbacProxy.containerSecurityContext.allowPrivilegeEscalation bool <code>false</code> allowPrivilegeEscalation controllerManager.kubeRbacProxy.containerSecurityContext.capabilities object <code>{\"drop\":[\"ALL\"]}</code> capabilities to drop controllerManager.kubeRbacProxy.image object <code>{\"repository\":\"gcr.io/kubebuilder/kube-rbac-proxy\",\"tag\":\"v0.16.0\"}</code> image to use for the kube-rbac-proxy controllerManager.kubeRbacProxy.resources object <code>{\"limits\":{\"cpu\":\"500m\",\"memory\":\"128Mi\"},\"requests\":{\"cpu\":\"5m\",\"memory\":\"64Mi\"}}</code> resources to request for the kube-rbac-proxy controllerManager.kubeRbacProxy.resources.limits object <code>{\"cpu\":\"500m\",\"memory\":\"128Mi\"}</code> limits for the kube-rbac-proxy controllerManager.kubeRbacProxy.resources.requests object <code>{\"cpu\":\"5m\",\"memory\":\"64Mi\"}</code> requests for the kube-rbac-proxy controllerManager.manager object <code>{\"containerSecurityContext\":{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]}},\"image\":{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"ghcr.io/beamlit/beamlit-controller\",\"tag\":\"latest\"},\"resources\":{\"limits\":{\"cpu\":\"500m\",\"memory\":\"128Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"64Mi\"}}}</code> manager options controllerManager.manager.containerSecurityContext object <code>{\"allowPrivilegeEscalation\":false,\"capabilities\":{\"drop\":[\"ALL\"]}}</code> container security context controllerManager.manager.containerSecurityContext.allowPrivilegeEscalation bool <code>false</code> allowPrivilegeEscalation controllerManager.manager.image object <code>{\"pullPolicy\":\"IfNotPresent\",\"repository\":\"ghcr.io/beamlit/beamlit-controller\",\"tag\":\"latest\"}</code> image to use for the manager controllerManager.manager.resources object <code>{\"limits\":{\"cpu\":\"500m\",\"memory\":\"128Mi\"},\"requests\":{\"cpu\":\"10m\",\"memory\":\"64Mi\"}}</code> resources to request for the manager controllerManager.manager.resources.limits object <code>{\"cpu\":\"500m\",\"memory\":\"128Mi\"}</code> limits for the manager controllerManager.manager.resources.requests object <code>{\"cpu\":\"10m\",\"memory\":\"64Mi\"}</code> requests for the manager controllerManager.podSecurityContext object <code>{\"runAsNonRoot\":true}</code> pod security context controllerManager.replicas int <code>1</code> number of replicas controllerManager.serviceAccount object <code>{\"annotations\":{}}</code> service account installBeamlitGateway bool <code>true</code> installBeamlitGateway is a flag to install the beamlit gateway along with the controller installMetricServer bool <code>false</code> installMetricsServer is a flag to install the metrics-server along with the controller kubernetesClusterDomain string <code>\"cluster.local\"</code> kubernetes cluster domain metrics-server object <code>{\"args\":[\"--kubelet-insecure-tls\"]}</code> metrics-server options metrics-server.args list <code>[\"--kubelet-insecure-tls\"]</code> args to pass to the metrics-server metricsService object <code>{\"ports\":[{\"name\":\"https\",\"port\":8443,\"protocol\":\"TCP\",\"targetPort\":\"https\"}],\"type\":\"ClusterIP\"}</code> metrics service metricsService.ports list <code>[{\"name\":\"https\",\"port\":8443,\"protocol\":\"TCP\",\"targetPort\":\"https\"}]</code> ports for the metrics service"},{"location":"admin-guide/getting-started.html","title":"Beamlit Controller","text":""},{"location":"admin-guide/getting-started.html#tldr","title":"TL;DR","text":"<p>You can apply for private beta access here. After that, you will need to create a workspace and a service account in the workspace. Make sure to retrieve the service account's <code>client ID</code> and <code>client secret</code> as you will need it to install the controller. Then you can install the Beamlit Controller using Helm:</p> <pre><code>export CLIENT_ID=REPLACE_ME\nexport CLIENT_SECRET=REPLACE_ME\nexport API_KEY=`echo -n $CLIENT_ID:$CLIENT_SECRET | base64`\nhelm install beamlit-controller oci://ghcr.io/beamlit/beamlit-controller-chart \\\n    --set installMetricServer=true \\ # If you want to install the metric server along with the controller to allow offloading models\n    --set beamlitApiToken=$API_KEY \\\n    --set config.defaultRemoteBackend.authConfig.oauthConfig.clientId=$CLIENT_ID \\\n    --set config.defaultRemoteBackend.authConfig.oauthConfig.clientSecret=$CLIENT_SECRET\n</code></pre>"},{"location":"admin-guide/getting-started.html#introduction","title":"Introduction","text":"<p>Before you begin</p> <p>Please read the Getting Started before reading this section.</p> <p>The Beamlit Controller that comes with its own CRDs to manage Beamlit AI agents directly in your Kubernetes cluster. It is built using the Operator SDK and the Kubernetes Go client library.</p> <p>It is composed of two components:</p> <ul> <li>A controller which is responsible for watching the resources and reconciling the desired state with the actual state.</li> <li>A gateway which is responsible for handling the incoming inference requests and routing them to the appropriate backend.</li> </ul>"},{"location":"admin-guide/getting-started.html#configuring-controller","title":"Configuring Controller","text":"<p>Environment variable</p> <p>You need to set <code>BEAMLIT_TOKEN</code> env variable to be able to use the Beamlit Controller. This token is used to authenticate with the Beamlit API. It's you <code>client_id</code> and <code>client_secret</code> concatenated with a colon and then base64 encoded. Example: <code>echo -n $CLIENT_ID:$CLIENT_SECRET | base64</code></p> <p>You can configure the Beamlit Controller by creating a <code>config.yaml</code> file. Below is an example of a <code>config.yaml</code> file:</p> <pre><code># -- enable-http2\nenableHTTP2: false\n# -- secure-metrics\nsecureMetrics: false\n# -- namespaces\nnamespaces: default\n# -- default-remote-backend\ndefaultRemoteBackend:\n  # -- host\n  host: \"run.beamlit.com\"\n  # -- path-prefix\n  pathPrefix: \"/$workspace/$model\"\n  # -- auth-config\n  authConfig:\n    # -- type\n    type: oauth\n    # -- oauth2\n    oauthConfig:\n      # -- client-id\n      clientId: \"REPLACE_ME\"\n      # -- client-secret\n      clientSecret: \"REPLACE_ME\"\n      # -- token-url\n      tokenUrl: \"https://api.beamlit.com/v0/oauth/token\"\n  # -- scheme\n  scheme: https\n</code></pre> <p>Please refer to the Configuration Reference for more information on the configuration options.</p>"},{"location":"admin-guide/getting-started.html#deploying-controller","title":"Deploying Controller","text":"<p>We advise you to deploy the Beamlit Controller using Helm. Below is an example of how to deploy the Beamlit Controller using Helm:</p> <pre><code>export CLIENT_ID=REPLACE_ME\nexport CLIENT_SECRET=REPLACE_ME\nexport API_KEY=`echo -n $CLIENT_ID:$CLIENT_SECRET | base64`\nhelm install beamlit-controller oci://ghcr.io/beamlit/beamlit-controller-chart \\\n    --set installMetricServer=true \\ # If you want to install the metric server along with the controller to allow offloading models\n    --set beamlitApiToken=$API_KEY \\\n    --set config.defaultRemoteBackend.authConfig.oauthConfig.clientId=$CLIENT_ID \\\n    --set config.defaultRemoteBackend.authConfig.oauthConfig.clientSecret=$CLIENT_SECRET\n</code></pre> <p>You can find the default values for the Beamlit Controller Helm chart and more information here</p>"},{"location":"admin-guide/getting-started.html#configuring-metric-source-for-offloading","title":"Configuring Metric Source for Offloading","text":"<p>Currently, the Beamlit Controller supports offloading models to a remote backend based on two metric source:</p> <ul> <li>Kubernetes Metrics Server (Default)</li> <li>Prometheus Compatible servers</li> </ul> <p>In the config file, you can specify the metric source for offloading. Below is an example of how to configure the metric source for offloading to use Prometheus:</p> <pre><code>config:\n  # ...\n  metricInformer:\n    type: prometheus\n    prometheus:\n      address: my-local-prom:9090\n</code></pre>"},{"location":"crds/crds-docs.html","title":"API Reference","text":""},{"location":"crds/crds-docs.html#packages","title":"Packages","text":"<ul> <li>authorization.beamlit.com/v1alpha1</li> <li>deployment.beamlit.com/v1alpha1</li> </ul>"},{"location":"crds/crds-docs.html#authorizationbeamlitcomv1alpha1","title":"authorization.beamlit.com/v1alpha1","text":"<p>Package v1alpha1 contains API Schema definitions for the model v1alpha1 API group</p>"},{"location":"crds/crds-docs.html#resource-types","title":"Resource Types","text":"<ul> <li>Policy</li> <li>PolicyList</li> </ul>"},{"location":"crds/crds-docs.html#policy","title":"Policy","text":"<p>Policy is the Schema for the policies API</p> <p>Appears in: - PolicyList</p> Field Description Default Validation <code>apiVersion</code> string <code>authorization.beamlit.com/v1alpha1</code> <code>kind</code> string <code>Policy</code> <code>kind</code> string Kind is a string value representing the REST resource this object represents.Servers may infer this from the endpoint the client submits requests to.Cannot be updated.In CamelCase.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds <code>apiVersion</code> string APIVersion defines the versioned schema of this representation of an object.Servers should convert recognized schemas to the latest internal value, andmay reject unrecognized values.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> PolicySpec <code>status</code> PolicyStatus"},{"location":"crds/crds-docs.html#policyflavor","title":"PolicyFlavor","text":"<p>Appears in: - PolicySpec</p> Field Description Default Validation <code>type</code> string Type is the type of the flavor Required: {}  <code>name</code> string Name is the name of the flavor Required: {}"},{"location":"crds/crds-docs.html#policylist","title":"PolicyList","text":"<p>PolicyList contains a list of Policy</p> Field Description Default Validation <code>apiVersion</code> string <code>authorization.beamlit.com/v1alpha1</code> <code>kind</code> string <code>PolicyList</code> <code>kind</code> string Kind is a string value representing the REST resource this object represents.Servers may infer this from the endpoint the client submits requests to.Cannot be updated.In CamelCase.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds <code>apiVersion</code> string APIVersion defines the versioned schema of this representation of an object.Servers should convert recognized schemas to the latest internal value, andmay reject unrecognized values.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources <code>metadata</code> ListMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>items</code> Policy array"},{"location":"crds/crds-docs.html#policylocation","title":"PolicyLocation","text":"<p>Appears in: - PolicySpec</p> Field Description Default Validation <code>type</code> PolicySubTypeLocation Type is the type of the location Required: {}  <code>name</code> string Name is the name of the location Required: {}"},{"location":"crds/crds-docs.html#policyspec","title":"PolicySpec","text":"<p>PolicySpec defines the desired state of Policy on Beamlit</p> <p>Appears in: - Policy</p> Field Description Default Validation <code>displayName</code> string DisplayName is the display name of the policy Optional: {}  <code>type</code> PolicyType Type is the type of the policy Enum: [location flavor] Required: {}  <code>locations</code> PolicyLocation array <code>flavors</code> PolicyFlavor array Flavors is the list of flavors allowed by the policyIf not set, all flavors are allowed Optional: {}"},{"location":"crds/crds-docs.html#policystatus","title":"PolicyStatus","text":"<p>PolicyStatus defines the observed state of Policy</p> <p>Appears in: - Policy</p> Field Description Default Validation <code>createdAtOnBeamlit</code> Time CreatedAtOnBeamlit is the time when the policy was created on Beamlit <code>updatedAtOnBeamlit</code> Time UpdatedAtOnBeamlit is the time when the policy was updated on Beamlit <code>workspace</code> string Workspace is the workspace of the policy"},{"location":"crds/crds-docs.html#policysubtypelocation","title":"PolicySubTypeLocation","text":"<p>Underlying type: string</p> <p>Appears in: - PolicyLocation</p> Field Description <code>location</code> <code>country</code> <code>continent</code>"},{"location":"crds/crds-docs.html#policytype","title":"PolicyType","text":"<p>Underlying type: string</p> <p>Appears in: - PolicySpec</p> Field Description <code>location</code> <code>flavor</code>"},{"location":"crds/crds-docs.html#deploymentbeamlitcomv1alpha1","title":"deployment.beamlit.com/v1alpha1","text":"<p>Package v1alpha1 contains API Schema definitions for the model v1alpha1 API group</p>"},{"location":"crds/crds-docs.html#resource-types_1","title":"Resource Types","text":"<ul> <li>ModelDeployment</li> <li>ModelDeploymentList</li> <li>ToolDeployment</li> <li>ToolDeploymentList</li> </ul>"},{"location":"crds/crds-docs.html#authconfig","title":"AuthConfig","text":"<p>Appears in: - RemoteBackend</p> Field Description Default Validation <code>type</code> AuthType Type is the type of the authentication Enum: [oauth] Required: {}  <code>oauthConfig</code> OAuthConfig OAuthConfig is the OAuth configuration for the remote backend Optional: {}"},{"location":"crds/crds-docs.html#authtype","title":"AuthType","text":"<p>Underlying type: string</p> <p>Appears in: - AuthConfig</p> Field Description <code>oauth</code>"},{"location":"crds/crds-docs.html#modeldeployment","title":"ModelDeployment","text":"<p>ModelDeployment is the Schema for the modeldeployments API</p> <p>Appears in: - ModelDeploymentList</p> Field Description Default Validation <code>apiVersion</code> string <code>deployment.beamlit.com/v1alpha1</code> <code>kind</code> string <code>ModelDeployment</code> <code>kind</code> string Kind is a string value representing the REST resource this object represents.Servers may infer this from the endpoint the client submits requests to.Cannot be updated.In CamelCase.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds <code>apiVersion</code> string APIVersion defines the versioned schema of this representation of an object.Servers should convert recognized schemas to the latest internal value, andmay reject unrecognized values.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> ModelDeploymentSpec <code>status</code> ModelDeploymentStatus"},{"location":"crds/crds-docs.html#modeldeploymentlist","title":"ModelDeploymentList","text":"<p>ModelDeploymentList contains a list of ModelDeployment</p> Field Description Default Validation <code>apiVersion</code> string <code>deployment.beamlit.com/v1alpha1</code> <code>kind</code> string <code>ModelDeploymentList</code> <code>kind</code> string Kind is a string value representing the REST resource this object represents.Servers may infer this from the endpoint the client submits requests to.Cannot be updated.In CamelCase.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds <code>apiVersion</code> string APIVersion defines the versioned schema of this representation of an object.Servers should convert recognized schemas to the latest internal value, andmay reject unrecognized values.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources <code>metadata</code> ListMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>items</code> ModelDeployment array"},{"location":"crds/crds-docs.html#modeldeploymentspec","title":"ModelDeploymentSpec","text":"<p>ModelDeploymentSpec defines the desired state of ModelDeployment</p> <p>Appears in: - ModelDeployment</p> Field Description Default Validation <code>model</code> string Model is the name of the base model Required: {}  <code>enabled</code> boolean Enabled is the flag to enable the model deployment on Beamlit true Optional: {}  <code>modelSourceRef</code> ObjectReference ModelSourceRef is the reference to the model sourceThis is either a Deployment, StatefulSet... (anything that is a template for a pod) Required: {}  <code>serviceRef</code> ServiceReference ServiceRef is the reference to the service exposing the model inside the clusterIf not specified, a local service will be created Optional: {}  <code>metricServiceRef</code> ServiceReference MetricServiceRef is the reference to the service exposing the metrics inside the clusterIf not specified, the model deployment will not be offloaded Optional: {}  <code>environment</code> string Environment is the environment attached to the model deploymentIf not specified, the model deployment will be deployed in the \"prod\" environment production Optional: {}  <code>policies</code> PolicyRef array Policies is the list of policies to apply to the model deployment {  } Optional: {}  <code>serverlessConfig</code> ServerlessConfig ServerlessConfig is the serverless configuration for the model deploymentIf not specified, the model deployment will be deployed with a default serverless configuration Optional: {}  <code>offloadingConfig</code> OffloadingConfig OffloadingConfig is the offloading configuration for the model deploymentIf not specified, the model deployment will not be offloaded Optional: {}"},{"location":"crds/crds-docs.html#modeldeploymentstatus","title":"ModelDeploymentStatus","text":"<p>ModelDeploymentStatus defines the observed state of ModelDeployment</p> <p>Appears in: - ModelDeployment</p> Field Description Default Validation <code>offloadingStatus</code> boolean OffloadingStatus is the status of the offloadingTrue if the model deployment is offloaded <code>servingPort</code> integer ServingPort is the port inside the pod that the model is served on <code>metricPort</code> integer MetricPort is the port inside the pod that the metrics are exposed on <code>workspace</code> string Workspace is the workspace of the model deployment <code>createdAtOnBeamlit</code> Time CreatedAtOnBeamlit is the time when the model deployment was created on Beamlit <code>updatedAtOnBeamlit</code> Time UpdatedAtOnBeamlit is the time when the model deployment was updated on Beamlit"},{"location":"crds/crds-docs.html#oauthconfig","title":"OAuthConfig","text":"<p>Appears in: - AuthConfig</p> Field Description Default Validation <code>clientId</code> string ClientID is the client ID for the OAuth configuration Required: {}  <code>clientSecret</code> string ClientSecret is the client secret for the OAuth configuration Required: {}  <code>tokenUrl</code> string TokenURL is the token URL for the OAuth configuration Required: {}"},{"location":"crds/crds-docs.html#offloadingbehavior","title":"OffloadingBehavior","text":"<p>Appears in: - OffloadingConfig</p> Field Description Default Validation <code>percentage</code> integer Percentage is the percentage of the requests that will be offloaded 100 Maximum: 100 Minimum: 0 Optional: {}"},{"location":"crds/crds-docs.html#offloadingconfig","title":"OffloadingConfig","text":"<p>Appears in: - ModelDeploymentSpec</p> Field Description Default Validation <code>remoteBackend</code> RemoteBackend RemoteBackend is the reference to the remote backendBy default, the model deployment will be offloaded to the default backend Optional: {}  <code>metrics</code> MetricSpec array Metrics is the list of metrics used for offloading {  } Optional: {}  <code>behavior</code> OffloadingBehavior Behavior is the behavior of the offloading {  } Optional: {}"},{"location":"crds/crds-docs.html#policyref","title":"PolicyRef","text":"<p>PolicyRef is the reference to a policy</p> <p>Appears in: - ModelDeploymentSpec</p> Field Description Default Validation <code>refType</code> PolicyRefType RefType is the type of the policy reference remotePolicy Enum: [remotePolicy localPolicy] Required: {}  <code>name</code> string Name is the name of the policy Optional: {}"},{"location":"crds/crds-docs.html#policyreftype","title":"PolicyRefType","text":"<p>Underlying type: string</p> <p>Appears in: - PolicyRef</p> Field Description <code>remotePolicy</code> <code>localPolicy</code>"},{"location":"crds/crds-docs.html#remotebackend","title":"RemoteBackend","text":"<p>Appears in: - OffloadingConfig</p> Field Description Default Validation <code>host</code> string Host is the host of the remote backend Required: {}  <code>authConfig</code> AuthConfig AuthConfig is the authentication configuration for the remote backend Optional: {}  <code>pathPrefix</code> string PathPrefix is the path prefix for the remote backend <code>headersToAdd</code> object (keys:string, values:string) HeadersToAdd is the list of headers to add to the requests Optional: {}  <code>scheme</code> SupportedScheme Scheme is the scheme for the remote backend http Enum: [http https] Optional: {}"},{"location":"crds/crds-docs.html#serverlessconfig","title":"ServerlessConfig","text":"<p>Appears in: - ModelDeploymentSpec</p> Field Description Default Validation <code>minNumReplicas</code> integer MinNumReplicas is the minimum number of replicas 0 Minimum: 0 Optional: {}  <code>maxNumReplicas</code> integer MaxNumReplicas is the maximum number of replicas 10 Minimum: 0 Optional: {}  <code>metric</code> string Metric is the metric used for scaling Optional: {}  <code>target</code> string Target is the target value for the metric Optional: {}  <code>scaleUpMinimum</code> integer ScaleUpMinimum is the minimum number of replicas to scale up Minimum: 2 Optional: {}  <code>scaleDownDelay</code> string ScaleDownDelay is the delay between scaling down Optional: {}  <code>stableWindow</code> string StableWindow is the window of time to consider the number of replicas stable Optional: {}  <code>lastPodRetentionPeriod</code> string LastPodRetentionPeriod is the retention period for the last pod Optional: {}"},{"location":"crds/crds-docs.html#servicereference","title":"ServiceReference","text":"<p>Appears in: - ModelDeploymentSpec</p> Field Description Default Validation <code>targetPort</code> integer"},{"location":"crds/crds-docs.html#supportedscheme","title":"SupportedScheme","text":"<p>Underlying type: string</p> <p>Appears in: - RemoteBackend</p> Field Description <code>http</code> <code>https</code>"},{"location":"crds/crds-docs.html#tooldeployment","title":"ToolDeployment","text":"<p>ToolDeployment is the Schema for the tooldeployments API</p> <p>Appears in: - ToolDeploymentList</p> Field Description Default Validation <code>apiVersion</code> string <code>deployment.beamlit.com/v1alpha1</code> <code>kind</code> string <code>ToolDeployment</code> <code>kind</code> string Kind is a string value representing the REST resource this object represents.Servers may infer this from the endpoint the client submits requests to.Cannot be updated.In CamelCase.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds <code>apiVersion</code> string APIVersion defines the versioned schema of this representation of an object.Servers should convert recognized schemas to the latest internal value, andmay reject unrecognized values.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources <code>metadata</code> ObjectMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>spec</code> ToolDeploymentSpec <code>status</code> ToolDeploymentStatus"},{"location":"crds/crds-docs.html#tooldeploymentlist","title":"ToolDeploymentList","text":"<p>ToolDeploymentList contains a list of ToolDeployment</p> Field Description Default Validation <code>apiVersion</code> string <code>deployment.beamlit.com/v1alpha1</code> <code>kind</code> string <code>ToolDeploymentList</code> <code>kind</code> string Kind is a string value representing the REST resource this object represents.Servers may infer this from the endpoint the client submits requests to.Cannot be updated.In CamelCase.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds <code>apiVersion</code> string APIVersion defines the versioned schema of this representation of an object.Servers should convert recognized schemas to the latest internal value, andmay reject unrecognized values.More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources <code>metadata</code> ListMeta Refer to Kubernetes API documentation for fields of <code>metadata</code>. <code>items</code> ToolDeployment array"},{"location":"crds/crds-docs.html#tooldeploymentspec","title":"ToolDeploymentSpec","text":"<p>ToolDeploymentSpec defines the desired state of ToolDeployment</p> <p>Appears in: - ToolDeployment</p> Field Description Default Validation <code>foo</code> string Foo is an example field of ToolDeployment. Edit tooldeployment_types.go to remove/update"},{"location":"crds/crds-docs.html#tooldeploymentstatus","title":"ToolDeploymentStatus","text":"<p>ToolDeploymentStatus defines the observed state of ToolDeployment</p> <p>Appears in: - ToolDeployment</p>"},{"location":"developer-guide/architecture.html","title":"Beamlit Controller Code Architecture","text":"<p>The Beamlit Controller is a Kubernetes operator that provides a way to manage Beamlit applications. It is built using the Operator SDK and the Kubernetes Go client library.</p>"},{"location":"developer-guide/architecture.html#controller-package","title":"Controller package","text":"<p>Controller package is the core of the controller. It is responsible for watching the resources and reconciling the desired state with the actual state.</p> <p>To do this, it uses a Kubernetes controller pattern. It watches the Beamlit applications and ordinates the creation of the corresponding elements. It also keeps listening informers for the metrics and health probes in order to update the dataplane accordingly.</p>"},{"location":"developer-guide/architecture.html#dataplane-package","title":"Dataplane package","text":"<p>In this package, we implement the dataplane logic. This is the part that is responsible for the actual network setup for offloading.</p>"},{"location":"developer-guide/architecture.html#informers-package","title":"Informers package","text":"<p>This package contains the informers that are used to watch various elements. Such as metrics and health probes.</p>"},{"location":"developer-guide/getting-started.html","title":"Getting Started","text":"<p>In this guide, we'll go over the development process for the Beamlit Controller.</p>"},{"location":"developer-guide/getting-started.html#prerequisites","title":"Prerequisites","text":"<ul> <li>Go 1.23+</li> <li>Docker</li> <li>kubectl</li> <li>helm 3.8.0+</li> <li>kind with kubernetes 1.31+ (for local development)</li> </ul>"},{"location":"developer-guide/getting-started.html#setting-up-the-development-environment","title":"Setting up the development environment","text":"<ol> <li> <p>Clone the repository:   <pre><code>git clone https://github.com/beamlit/beamlit-controller.git\ncd beamlit-controller\n</code></pre></p> </li> <li> <p>Build the gateway Docker image:   <pre><code>docker build -t beamlit/gateway:dev -f Dockerfile.gateway .\n</code></pre></p> </li> <li> <p>Build the controller Docker image:   <pre><code>docker build -t beamlit/controller:dev -f Dockerfile .\n</code></pre></p> </li> <li> <p>Create a local Kubernetes cluster using KinD:   <pre><code>kind create cluster\n</code></pre></p> </li> <li> <p>Load the Docker images into the KinD cluster:   <pre><code>kind load docker-image beamlit/gateway:dev\nkind load docker-image beamlit/controller:dev\n</code></pre></p> </li> <li> <p>Modify the Helm chart to use the local images and run:   <pre><code>cd chart\nhelm dependency build\nhelm install beamlit-controller .\n</code></pre></p> </li> </ol>"},{"location":"developer-guide/getting-started.html#testing","title":"Testing","text":"<p>To run the tests, simply run:</p> <pre><code>make test\n</code></pre>"},{"location":"developer-guide/getting-started.html#code-generation","title":"Code generation","text":"<p>The controller uses controller-gen to generate the CRD and webhook manifests. To generate the manifests, run:</p> <pre><code>make generate\n</code></pre>"},{"location":"developer-guide/getting-started.html#contributing","title":"Contributing","text":"<p>Please read our contributing guidelines before submitting a pull request.</p>"},{"location":"user-guide/core-resources.html","title":"Core Resources","text":"<p>With the Beamlit Controller you can interact directly inside your Kubernetes cluster with the following resources hosted on Beamlit:</p> <ul> <li>Models (using the <code>ModelDeployment</code> custom resource)</li> <li>Policies (using the <code>Policy</code> custom resource)</li> <li>More to come</li> </ul> <p>The key benefits of using Beamlit resources in your cluster are:</p> <ul> <li>Seamless Offloading: Effortlessly offload your AI agents to remote clusters for hybrid deployments. Beamlit guarantees uninterrupted user traffic during bursts or failures and allows you to load balance between your on-premises and Beamlit-managed clusters.</li> <li>Unified Management: Centrally manage your AI agents and policies from a single, intuitive interface. Oversee all your AI models and policies with ease.</li> <li>Automated Deployments: Streamline the deployment of your AI agents using your existing tools. Beamlit is fully compatible with GitOps, CI/CD, and other DevOps tools, ensuring smooth integration into your workflow.</li> </ul>"},{"location":"user-guide/core-resources.html#modeldeployment","title":"ModelDeployment","text":"<p>To manage your models, you need to create a <code>ModelDeployment</code> resource. Below is an example of a <code>ModelDeployment</code> resource for a model you have deployed in your Kubernetes cluster. In this example, offloading is scheduled to trigger when the average CPU usage of the deployment reaches 90%, at which point 50% of the requests will be routed to the remote cluster:</p> <pre><code>apiVersion: deployment.beamlit.com/v1alpha1\nkind: ModelDeployment\nmetadata:\n  name: my-model\nspec:\n  model: my-model-on-Beamlit\n  environment: production\n  modelSourceRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: my-model\n    namespace: default\n  serviceRef:\n    name: my-model\n    namespace: default\n    targetPort: 8080\n  offloadingConfig:\n    behavior:\n      percentage: 50\n    metrics:\n      - type: Resource\n        resource:\n          name: cpu\n          target:\n            type: Utilization\n            averageUtilization: 90\n</code></pre> <p>Let's break down the fields in the <code>ModelDeployment</code> resource:</p> <ul> <li><code>model</code>: The name of the model on Beamlit. If it exists, the environment of the model will be updated; otherwise, it will be created.</li> <li><code>environment</code>: The environment of the model on Beamlit. By default, it is set to <code>production</code>. Yet, we only support <code>production</code> and <code>development</code> environments.</li> <li><code>modelSourceRef</code>: The reference to the Kubernetes deployment, statefulset, daemonset, ..., that hosts the model.</li> <li><code>serviceRef</code>: The reference to the Kubernetes service that exposes the model. The <code>targetPort</code> field specifies the port on which the model is listening for incoming inference requests.</li> <li><code>offloadingConfig</code>: The configuration for offloading the model. It specifies the behavior of the offloading and the metrics that trigger the offloading. Note, you can disable offloading by omitting this field.</li> </ul> <p>For further details on the <code>ModelDeployment</code> resource, refer to the ModelDeployment API reference.</p>"},{"location":"user-guide/core-resources.html#policy","title":"Policy","text":"<p>A <code>Policy</code> resource allows you to define rules that govern the deployment of your model on Beamlit, thus the behavior of the offloading. There is two types of policies: one for the location of the offloading and one for the flavor of the offloading.</p> <p>Here is an example of a <code>Policy</code> resource that specifies a location constraint (only offload to the US and North America).</p> <pre><code>apiVersion: authorization.beamlit.com/v1alpha1\nkind: Policy\nmetadata:\n  name: my-policy\nspec:\n  type: location\n  locations:\n    - type: country\n      name: \"us\"\n    - type: continent\n      name: \"na\"\n</code></pre> <p>To attach this policy to a model, you need to reference it in the <code>ModelDeployment</code> resource:</p> <pre><code>apiVersion: deployment.beamlit.com/v1alpha1\nkind: ModelDeployment\nmetadata:\n  name: my-model\nspec:\n  model: my-model-on-Beamlit\n  environment: production\n  modelSourceRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: my-model\n    namespace: default\n  serviceRef:\n    name: my-model\n    namespace: default\n    targetPort: 8080\n  policies:\n    - refType: localPolicy\n      name: my-policy\n    - refType: remotePolicy\n      name: my-policy-on-beamlit\n  offloadingConfig:\n    behavior:\n      percentage: 50\n    metrics:\n      - type: Resource\n        resource:\n          name: cpu\n          target:\n            type: Utilization\n            averageUtilization: 90\n</code></pre> <p>In this example, the <code>Policy</code> resource <code>my-policy</code> is attached to the <code>ModelDeployment</code> resource <code>my-model</code>. Along with the location policy, a flavor policy <code>my-policy-on-beamlit</code> is also attached to the model, this is a policy living on Beamlit.</p> <p>For further details on the <code>Policy</code> resource, refer to the Policy API reference.</p>"},{"location":"user-guide/core-resources.html#next-steps","title":"Next Steps","text":"<ul> <li>Learn about offloading metrics</li> </ul>"},{"location":"user-guide/offloading-metric.html","title":"Offloading Metric","text":"<p>The offloading metric is a customizable infrastructure metric used by the Beamlit controller to trigger model offloading when it hits a certain threshold.</p> <p>Currently, Beamlit supports two ways to retrieve metrics:</p> <ul> <li>metrics from a self-managed Prometheus, evaluated through a Prometheus query (PromQL).</li> <li>metrics from a Kubernetes metrics-server</li> </ul>"},{"location":"user-guide/offloading-metric.html#overview","title":"Overview","text":"<p>Setting up the offloading metric is made via the following parameters in the <code>ModelDeployment</code> custom resource:</p> <pre><code>spec:\n  # ...\n  offloadingConfig:\n    remoteBackend:\n      host: my-model-on-another-cluster:80\n      scheme: http\n    behavior:\n      percentage: 50\n    metrics:\n      - type: Resource\n        resource:\n          name: cpu\n          target:\n            type: Utilization\n            averageUtilization: 50\n</code></pre> <p>where:</p> <ul> <li><code>remoteBackend</code> is the reference to the remote cluster/backend where your traffic will be offloaded to</li> <li><code>behavior</code> is the percentage of requests to offload to the remote backend when the offloading metric reaches its threshold</li> <li><code>metrics</code> is the offloading metric, based on which the controller will decide whether to trigger traffic offloading</li> </ul>"},{"location":"user-guide/offloading-metric.html#set-up-metric-using-prometheus","title":"Set up metric using Prometheus","text":""},{"location":"user-guide/offloading-metric.html#prerequisites","title":"Prerequisites","text":"<ul> <li>A Prometheus server that is either in your Kubernetes cluster, or accessible in your network via URL without authentication.</li> <li>Set up the Beamlit controller to monitor your Prometheus service by adding the following configuration in the controller\u2019s <code>values.yaml</code> :</li> </ul> <pre><code>config:\n  metricInformer:\n    type: prometheus\n    prometheus:\n      address: my-local-prom:9090\n</code></pre>"},{"location":"user-guide/offloading-metric.html#metric-overview","title":"Metric overview","text":"<p>The Beamlit controller can use any metric that is saved in the Prometheus database, or use any computation on such metrics using PromQL.</p> <p>Metrics are specified by an External metric (MetricSpec from Kubernetes). For example:</p> <pre><code>offloadingConfig:\n  remoteBackend:\n    host: my-model-on-another-cluster:80\n    scheme: http\n  behavior:\n    percentage: 50\n  metrics:\n    - type: External\n      external:\n        metric:\n          name: my_custom_metric_in_prom # Metric name, or PromQL query\n          selector:\n            # Any label you want to match in your metric.\n            # This only works for a single metric (not a PromQL query).\n            matchLabels:\n            my_label: \"value\"\n          target:\n            type: Value\n            value: 10\n</code></pre>"},{"location":"user-guide/offloading-metric.html#set-up-metric-using-kubernetes-metrics-server","title":"Set up metric using Kubernetes metrics-server","text":""},{"location":"user-guide/offloading-metric.html#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Kubernetes metrics-server must be installed on your Kubernetes cluster.</li> </ul> <p>Using metrics-server is the default mode of the Beamlit controller.</p>"},{"location":"user-guide/offloading-metric.html#metric-overview_1","title":"Metric overview","text":"<p>The Beamlit controller can use any metric that's compatible with the Kubernetes HorizontalPodAutoscaler (HPA) and accessible through metrics-server.</p> <p>Metrics are defined using the Horizontal Pod Autoscaler (HPA) format for Resource, Pod, Object, and External metrics. For example, with Resource metrics:</p> <pre><code>metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 50\n</code></pre> <p>This will trigger offloading when the average CPU usage gets higher than 50%.</p> <p>Read more about the available parameters for defining metrics and targets on the Kubernetes HPA documentation.</p>"},{"location":"user-guide/tutorial/offload-to-any-backend.html","title":"Offload your model to any destination","text":"<p>One key thing with Beamlit Controller, is that you can use it without any Beamlit subscription. Basically, if you'are already running models replicas spread accross multiple clusters, Beamlit Controller can help you manage traffic and offload your models.</p> <p>In the following tutorial will show you how to setup this architecture:</p> <p> <pre><code>flowchart TD\nsubgraph s1[\"Kubernetes A\"]\n        n1[\"Llama 3\"]\n        n2[\"API\"]\n        n3[\"Beamlit Gateway\"]\n  end\nsubgraph s2[\"Kubernetes B\"]\n        n4[\"Llama 3\"]\n  end\n    n2 -- Call Llama3 --&gt; n3\n    n3 --&gt; n1\n    n3 -- Oflload --&gt; n4</code></pre> <p></p>"},{"location":"user-guide/tutorial/offload-to-any-backend.html#requirements","title":"Requirements","text":"<ul> <li>Two Kubernetes clusters</li> <li>Helm (version 3.8.0 or later is recommended).</li> <li>Beamlit controller installed on the first cluster (See Getting Started for that)</li> </ul>"},{"location":"user-guide/tutorial/offload-to-any-backend.html#lets-dive-in","title":"Let's dive in!","text":"<p>Lets assume you have a model deployment in your Kubernetes cluster. For testing purposes, this is a simple PHP-Apache deployment.</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: php-apache\nspec:\n  selector:\n    matchLabels:\n      run: php-apache\n  template:\n    metadata:\n      labels:\n        run: php-apache\n    spec:\n      containers:\n      - name: php-apache\n        image: registry.k8s.io/hpa-example\n        ports:\n        - containerPort: 80\n        resources:\n          limits:\n            cpu: 500m\n          requests:\n            cpu: 200m\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: php-apache\n  labels:\n    run: php-apache\nspec:\n  ports:\n  - port: 80\n  selector:\n    run: php-apache\n</code></pre> <p>Deploy this on the second cluster too, but make it reachable from the first cluster.</p> <pre><code>apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: php-apache\nspec:\n  selector:\n    matchLabels:\n      run: php-apache\n  template:\n    metadata:\n      labels:\n        run: php-apache\n    spec:\n      containers:\n      - name: php-apache\n        image: registry.k8s.io/hpa-example\n        ports:\n        - containerPort: 80\n        resources:\n          limits:\n            cpu: 500m\n          requests:\n            cpu: 200m\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: php-apache\n  labels:\n    run: php-apache\nspec:\n  type: LoadBalancer\n  ports:\n  - port: 80\n  selector:\n    run: php-apache\n</code></pre> <p>Now, you want to offload your deployment on the first cluster. Just create a ModelDeployment resource.</p> <pre><code>apiVersion: deployment.beamlit.com/v1alpha1\nkind: ModelDeployment\nmetadata:\n  name: my-model\nspec:\n  model: my-model\n  environment: production\n  modelSourceRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: php-apache\n    namespace: default\n  serviceRef:\n    name: php-apache\n    namespace: default\n    targetPort: 80\n  offloadingConfig:\n    remoteBackend:\n      host: my-model-on-another-cluster:80\n      scheme: http\n    behavior:\n      percentage: 50\n    metrics:\n      - type: Resource\n        resource:\n          name: cpu\n          target:\n            type: Utilization\n            averageUtilization: 50\n</code></pre>"},{"location":"user-guide/tutorial/offload-to-any-backend.html#further-reading","title":"Further reading","text":"<ul> <li>Check the CRD definition for more details on the ModelDeployment resource and availables fields in <code>spec.offloadingConfig.remoteBackend</code>.</li> </ul>"}]}