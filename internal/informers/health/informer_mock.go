// Code generated by MockGen. DO NOT EDIT.
// Source: informer.go
//
// Generated by this command:
//
//	mockgen -source=informer.go -destination=informer_mock.go -package=health HealthInformer
//

// Package health is a generated GoMock package.
package health

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "k8s.io/api/core/v1"
)

// MockHealthInformer is a mock of HealthInformer interface.
type MockHealthInformer struct {
	ctrl     *gomock.Controller
	recorder *MockHealthInformerMockRecorder
}

// MockHealthInformerMockRecorder is the mock recorder for MockHealthInformer.
type MockHealthInformerMockRecorder struct {
	mock *MockHealthInformer
}

// NewMockHealthInformer creates a new mock instance.
func NewMockHealthInformer(ctrl *gomock.Controller) *MockHealthInformer {
	mock := &MockHealthInformer{ctrl: ctrl}
	mock.recorder = &MockHealthInformerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthInformer) EXPECT() *MockHealthInformerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockHealthInformer) Register(ctx context.Context, model string, resource v1.ObjectReference) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", ctx, model, resource)
}

// Register indicates an expected call of Register.
func (mr *MockHealthInformerMockRecorder) Register(ctx, model, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockHealthInformer)(nil).Register), ctx, model, resource)
}

// Start mocks base method.
func (m *MockHealthInformer) Start(ctx context.Context) <-chan HealthStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(<-chan HealthStatus)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockHealthInformerMockRecorder) Start(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockHealthInformer)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockHealthInformer) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockHealthInformerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockHealthInformer)(nil).Stop))
}

// Unregister mocks base method.
func (m *MockHealthInformer) Unregister(ctx context.Context, model string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unregister", ctx, model)
}

// Unregister indicates an expected call of Unregister.
func (mr *MockHealthInformerMockRecorder) Unregister(ctx, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockHealthInformer)(nil).Unregister), ctx, model)
}
